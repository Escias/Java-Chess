@startuml

title __GAME's Class Diagram__\n

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.Bishop {
        + getPieceMoves()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.Board {
        - pieceList : List<Piece>
        - undoList : List<Undo>
        + Board()
        + addPieces()
        + checkMoves()
        + getPiece()
        + getRemainingPieces()
        + kingState()
        + movePiece()
        + movePiece()
        + moveUndo()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.ChessModel {
        {static} - instance : ChessModel
        {static} + getInstance()
        + getKingState()
        + getNbRemainingPieces()
        + getPieceColor()
        + getPieceMoves()
        + getPieceType()
        + getPlayerDuration()
        + getRemovedPieces()
        + movePiece()
        + reinit()
        + undoLastMove()
        - ChessModel()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.King {
        + getPieceMoves()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.Knight {
        + getPieceMoves()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.LostPieces {
        - lostPieces : List<Piece>
        + LostPieces()
        + getLostPiecesType()
        + lostPieces()
        + removePiece()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.MoveUtil {
        {static} - check : boolean
        {static} + Diagonal()
        {static} + Horizontal()
        {static} + MoveOtherPawn()
        {static} + MoveStartPawn()
        {static} + PossibleMove()
        {static} + PossibleMoveKnight()
        {static} + isEmpty()
        {static} + isEmptyOrEnemy()
        {static} + isEnemy()
        {static} + isValidPosition()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.Pawn {
        + getPieceMoves()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.Piece {
        + Piece()
        + getColor()
        + getPosition()
        + getPossibleMoves()
        + getType()
        + setPosition()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.Queen {
        + getPieceMoves()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.Rook {
        + getPieceMoves()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.Timer {
        - blackTimer : int
        - whiteTimer : int
        + getTimer()
    }
  }
  

  namespace fr.rphstudio.chess.game {
    class fr.rphstudio.chess.game.Undo {
        + Undo()
        + getFinalPosition()
        + getPieceToMove()
        + getRemovedPiece()
        + getSourcePosition()
    }
  }
  

  fr.rphstudio.chess.game.Bishop .up.|> fr.rphstudio.chess.interf.IMove
  fr.rphstudio.chess.game.ChessModel .up.|> fr.rphstudio.chess.interf.IChess
  fr.rphstudio.chess.game.ChessModel o-- fr.rphstudio.chess.game.Board : board
  fr.rphstudio.chess.game.ChessModel o-- fr.rphstudio.chess.game.LostPieces : lostPieces
  fr.rphstudio.chess.game.ChessModel o-- fr.rphstudio.chess.game.Timer : timer
  fr.rphstudio.chess.game.King .up.|> fr.rphstudio.chess.interf.IMove
  fr.rphstudio.chess.game.Knight .up.|> fr.rphstudio.chess.interf.IMove
  fr.rphstudio.chess.game.Pawn .up.|> fr.rphstudio.chess.interf.IMove
  fr.rphstudio.chess.game.Piece o-- fr.rphstudio.chess.interf.IChess.ChessColor : color
  fr.rphstudio.chess.game.Piece o-- fr.rphstudio.chess.interf.IMove : imove
  fr.rphstudio.chess.game.Piece o-- fr.rphstudio.chess.interf.IChess.ChessPosition : position
  fr.rphstudio.chess.game.Piece o-- fr.rphstudio.chess.interf.IChess.ChessType : type
  fr.rphstudio.chess.game.Queen .up.|> fr.rphstudio.chess.interf.IMove
  fr.rphstudio.chess.game.Rook .up.|> fr.rphstudio.chess.interf.IMove
  fr.rphstudio.chess.game.Undo o-- fr.rphstudio.chess.interf.IChess.ChessPosition : finalPosition
  fr.rphstudio.chess.game.Undo o-- fr.rphstudio.chess.game.Piece : pieceToMove
  fr.rphstudio.chess.game.Undo o-- fr.rphstudio.chess.game.Piece : removedPiece
  fr.rphstudio.chess.game.Undo o-- fr.rphstudio.chess.interf.IChess.ChessPosition : sourcePosition


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
